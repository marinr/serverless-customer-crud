AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Customer CRUD API

Parameters:
  Environment:
    Default: 'Dev'
    Type: String
  TableName:
    Default: 'CustomerTable'
    Type: String

Resources:
  CustomerTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${TableName}-${Environment}
      PrimaryKey:
         Name: id
         Type: String

  CustomerApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Customer CRUD API
      StageName: !Ref Environment

  GetCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: get_customer_lambda/src
      Policies:
        DynamoDBReadPolicy:
          TableName: !Ref CustomerTable
      Environment:
        Variables:
          TABLE_NAME: !Sub ${TableName}-${Environment}
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApiGateway
            Path: /customer/{id}
            Method: get

  PostCustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: create_customer_lambda/src
      Policies:
        DynamoDBWritePolicy:
          TableName: !Ref CustomerTable
      Environment:
        Variables:
          TABLE_NAME: !Sub ${TableName}-${Environment}
      Events:
        PostResource:
          Type: Api
          Properties:
            RestApiId: !Ref CustomerApiGateway
            Path: /customer
            Method: post

  Frontend:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  
  S3FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Frontend
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal: '*'
            Action:
              - "s3:GetObject"
            Resource: !Sub "${Frontend.Arn}/*" 
  
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Frontend
        Enabled: true
        Origins:
          - Id: FrontendS3Origin
            DomainName: !GetAtt Frontend.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: "/index.html"
            ErrorCachingMinTTL: 5
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: "/index.html"
            ErrorCachingMinTTL: 5
        DefaultCacheBehavior:
          TargetOriginId: FrontendS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          DefaultTTL: 5
          MinTTL: 0
          MaxTTL: 5
          ForwardedValues:
            QueryString: false
          Compress: true
        HttpVersion: http2
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-viewercertificate.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
            

Outputs:
  CustomerApiGateway:
    Description: 'Customer CRUD API'
    Value: !Sub 'https://${CustomerApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/customer'

  CFUrl:
    Description: 'Customer website CDN URL '
    Value: !GetAtt CloudFront.DomainName
  